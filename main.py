import streamlit as st
import numpy as np
import json
import pickle

with open('Columns.json', 'r') as f:
    data_columns = json.load(f)['data_columns']

with open('Scaler.pickle', 'rb') as f:
    scaler = pickle.load(f)

with open('Heart_Disease.pickle', 'rb') as f:
    model = pickle.load(f)

st.header(f'Heart Disease Predictor')

age = st.slider(label='Age', value=58)
bp = st.number_input(label='Current Blood Pressure', value=165)
cholesterol = st.number_input(label='Current Cholesterol Level', value=270)
bmi = st.number_input(label='BMI', value=33.5)
sleep = st.slider(label='Number Of Hours You Usually Sleep', min_value=0, max_value=24, value=5)
triglyceride = st.number_input(label='Current Triglyceride Level', value=230)
blood_sugar = st.number_input(label='Current Fasting Blood Sugar', value=135)
crp = st.number_input(label='Current CRP Level', value=5.8)
homocysteine = st.number_input(label='Current Homocysteine Level', value=18)
gender = st.selectbox(label='Gender', options=['Male', 'Female'])
excercise = st.selectbox(label='Excercising Habits', options=['Low', 'Medium', 'High'])

input_array = np.zeros(len(data_columns))

if (st.button(label='Submit Info')):
    input_array[0] = age
    input_array[1] = bp
    input_array[2] = cholesterol
    input_array[3] = bmi 
    input_array[4] = sleep
    input_array[5] = triglyceride
    input_array[6] = blood_sugar
    input_array[7] = crp
    input_array[8] = homocysteine

    if (gender == 'Male'):
        input_array[9] = 1
    else:
        input_array[9] = 0

    if (excercise == 'Low'):
        input_array[10] = 1 
    else:
        input_array[10] = 0

    scaled_input = scaler.transform([input_array])

    probability = model.predict_proba(scaled_input)[:, 1]

    threshold = 0.435
    prediction = (probability > threshold).astype(int)

    st.write(f'Predicted Probability Of Heart Disease **{probability[0] * 100:.2f}**%')
    st.progress(int(probability[0]*100))

    # User-friendly risk band interpretation
    if probability[0] < 0.3:
        st.success("🟢 Estimated Risk Level: Low")
    elif probability[0] < 0.6:
        st.warning("🟡 Estimated Risk Level: Moderate")
    else:
        st.error("🔴 Estimated Risk Level: High")

    # Model's binary classification result (based on threshold)
    if prediction[0] == 1:
        st.info("📌 Model Decision: Classified as **Positive for Heart Disease**")
    else:
        st.info("📌 Model Decision: Classified as **Negative for Heart Disease**")


    st.markdown("---")
    st.warning("""
    ⚠️ **Disclaimer**: This prediction is generated by a machine learning model trained on historical health data. While the model provides an estimate of heart disease risk, it is **not a substitute for professional medical advice, diagnosis, or treatment**. 
    The model has been evaluated using metrics such as precision, recall, and accuracy, and while it performs reasonably well, **false positives and false negatives can occur**. The threshold used (e.g., 0.435) may also influence the prediction outcome.
    Please consult a licensed healthcare provider for a thorough examination and accurate diagnosis.
    """)